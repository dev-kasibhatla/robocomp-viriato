//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `InnerModelManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <InnerModelManager.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompInnerModelManager::InnerModelManagerError> iceC_RoboCompInnerModelManager_InnerModelManagerError_init("::RoboCompInnerModelManager::InnerModelManagerError");

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_ids[2] =
{
    "::Ice::Object",
    "::RoboCompInnerModelManager::InnerModelManager"
};
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_ops[] =
{
    "addAttribute",
    "addJoint",
    "addMesh",
    "addPlane",
    "addTransform",
    "collide",
    "getAllNodeInformation",
    "getAttribute",
    "getPose",
    "getPoseFromParent",
    "getTransformationMatrix",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "moveNode",
    "removeAttribute",
    "removeNode",
    "setAttribute",
    "setPlane",
    "setPointCloudData",
    "setPose",
    "setPoseFromParent",
    "setScale",
    "transform"
};
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addAttribute_name = "addAttribute";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addJoint_name = "addJoint";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addMesh_name = "addMesh";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addPlane_name = "addPlane";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addTransform_name = "addTransform";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_collide_name = "collide";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name = "getAllNodeInformation";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name = "getAttribute";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name = "getPose";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name = "getPoseFromParent";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getTransformationMatrix_name = "getTransformationMatrix";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_moveNode_name = "moveNode";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_removeAttribute_name = "removeAttribute";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_removeNode_name = "removeNode";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setAttribute_name = "setAttribute";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setPlane_name = "setPlane";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setPointCloudData_name = "setPointCloudData";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setPose_name = "setPose";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setPoseFromParent_name = "setPoseFromParent";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setScale_name = "setScale";
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_transform_name = "transform";

}

RoboCompInnerModelManager::InnerModelManagerError::~InnerModelManagerError()
{
}

const ::std::string&
RoboCompInnerModelManager::InnerModelManagerError::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompInnerModelManager::InnerModelManagerError";
    return typeId;
}

bool
RoboCompInnerModelManager::InnerModelManager::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompInnerModelManager_InnerModelManager_ids, iceC_RoboCompInnerModelManager_InnerModelManager_ids + 2, s);
}

::std::vector<::std::string>
RoboCompInnerModelManager::InnerModelManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompInnerModelManager_InnerModelManager_ids[0], &iceC_RoboCompInnerModelManager_InnerModelManager_ids[2]);
}

::std::string
RoboCompInnerModelManager::InnerModelManager::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompInnerModelManager::InnerModelManager::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompInnerModelManager::InnerModelManager";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addAttribute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_idNode;
    ::std::string iceP_name;
    ::std::string iceP_type;
    ::std::string iceP_value;
    istr->readAll(iceP_idNode, iceP_name, iceP_type, iceP_value);
    inS.endReadParams();
    bool ret = this->addAttribute(::std::move(iceP_idNode), ::std::move(iceP_name), ::std::move(iceP_type), ::std::move(iceP_value), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addJoint(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_item;
    ::std::string iceP_base;
    jointType iceP_j;
    istr->readAll(iceP_item, iceP_base, iceP_j);
    inS.endReadParams();
    bool ret = this->addJoint(::std::move(iceP_item), ::std::move(iceP_base), ::std::move(iceP_j), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addMesh(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_item;
    ::std::string iceP_base;
    meshType iceP_m;
    istr->readAll(iceP_item, iceP_base, iceP_m);
    inS.endReadParams();
    bool ret = this->addMesh(::std::move(iceP_item), ::std::move(iceP_base), ::std::move(iceP_m), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addPlane(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_item;
    ::std::string iceP_base;
    Plane3D iceP_plane;
    istr->readAll(iceP_item, iceP_base, iceP_plane);
    inS.endReadParams();
    bool ret = this->addPlane(::std::move(iceP_item), ::std::move(iceP_base), ::std::move(iceP_plane), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addTransform(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_item;
    ::std::string iceP_engine;
    ::std::string iceP_base;
    Pose3D iceP_pose;
    istr->readAll(iceP_item, iceP_engine, iceP_base, iceP_pose);
    inS.endReadParams();
    bool ret = this->addTransform(::std::move(iceP_item), ::std::move(iceP_engine), ::std::move(iceP_base), ::std::move(iceP_pose), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_collide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_a;
    ::std::string iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    bool ret = this->collide(::std::move(iceP_a), ::std::move(iceP_b), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getAllNodeInformation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    NodeInformationSequence iceP_nodesInfo;
    this->getAllNodeInformation(iceP_nodesInfo, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_nodesInfo);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getAttribute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_idNode;
    ::std::string iceP_name;
    istr->readAll(iceP_idNode, iceP_name);
    inS.endReadParams();
    ::std::string iceP_type;
    ::std::string iceP_value;
    bool ret = this->getAttribute(::std::move(iceP_idNode), ::std::move(iceP_name), iceP_type, iceP_value, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_type, iceP_value, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_base;
    ::std::string iceP_item;
    istr->readAll(iceP_base, iceP_item);
    inS.endReadParams();
    Pose3D iceP_pose;
    bool ret = this->getPose(::std::move(iceP_base), ::std::move(iceP_item), iceP_pose, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_pose, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getPoseFromParent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_item;
    istr->readAll(iceP_item);
    inS.endReadParams();
    Pose3D iceP_pose;
    bool ret = this->getPoseFromParent(::std::move(iceP_item), iceP_pose, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_pose, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getTransformationMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_base;
    ::std::string iceP_item;
    istr->readAll(iceP_base, iceP_item);
    inS.endReadParams();
    Matrix ret = this->getTransformationMatrix(::std::move(iceP_base), ::std::move(iceP_item), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_moveNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_src;
    ::std::string iceP_dst;
    istr->readAll(iceP_src, iceP_dst);
    inS.endReadParams();
    bool ret = this->moveNode(::std::move(iceP_src), ::std::move(iceP_dst), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_removeAttribute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_idNode;
    ::std::string iceP_name;
    istr->readAll(iceP_idNode, iceP_name);
    inS.endReadParams();
    bool ret = this->removeAttribute(::std::move(iceP_idNode), ::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_removeNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_item;
    istr->readAll(iceP_item);
    inS.endReadParams();
    bool ret = this->removeNode(::std::move(iceP_item), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setAttribute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_idNode;
    ::std::string iceP_name;
    ::std::string iceP_type;
    ::std::string iceP_value;
    istr->readAll(iceP_idNode, iceP_name, iceP_type, iceP_value);
    inS.endReadParams();
    bool ret = this->setAttribute(::std::move(iceP_idNode), ::std::move(iceP_name), ::std::move(iceP_type), ::std::move(iceP_value), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setPlane(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_item;
    Plane3D iceP_plane;
    istr->readAll(iceP_item, iceP_plane);
    inS.endReadParams();
    bool ret = this->setPlane(::std::move(iceP_item), ::std::move(iceP_plane), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setPointCloudData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    PointCloudVector iceP_cloud;
    istr->readAll(iceP_id, iceP_cloud);
    inS.endReadParams();
    this->setPointCloudData(::std::move(iceP_id), ::std::move(iceP_cloud), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_base;
    ::std::string iceP_item;
    Pose3D iceP_pose;
    istr->readAll(iceP_base, iceP_item, iceP_pose);
    inS.endReadParams();
    bool ret = this->setPose(::std::move(iceP_base), ::std::move(iceP_item), ::std::move(iceP_pose), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setPoseFromParent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_item;
    Pose3D iceP_pose;
    istr->readAll(iceP_item, iceP_pose);
    inS.endReadParams();
    bool ret = this->setPoseFromParent(::std::move(iceP_item), ::std::move(iceP_pose), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setScale(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_item;
    float iceP_scaleX;
    float iceP_scaleY;
    float iceP_scaleZ;
    istr->readAll(iceP_item, iceP_scaleX, iceP_scaleY, iceP_scaleZ);
    inS.endReadParams();
    bool ret = this->setScale(::std::move(iceP_item), iceP_scaleX, iceP_scaleY, iceP_scaleZ, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_transform(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_base;
    ::std::string iceP_item;
    coord3D iceP_coordInItem;
    istr->readAll(iceP_base, iceP_item, iceP_coordInItem);
    inS.endReadParams();
    coord3D iceP_coordInBase;
    bool ret = this->transform(::std::move(iceP_base), ::std::move(iceP_item), ::std::move(iceP_coordInItem), iceP_coordInBase, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_coordInBase, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompInnerModelManager_InnerModelManager_ops, iceC_RoboCompInnerModelManager_InnerModelManager_ops + 25, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompInnerModelManager_InnerModelManager_ops)
    {
        case 0:
        {
            return _iceD_addAttribute(in, current);
        }
        case 1:
        {
            return _iceD_addJoint(in, current);
        }
        case 2:
        {
            return _iceD_addMesh(in, current);
        }
        case 3:
        {
            return _iceD_addPlane(in, current);
        }
        case 4:
        {
            return _iceD_addTransform(in, current);
        }
        case 5:
        {
            return _iceD_collide(in, current);
        }
        case 6:
        {
            return _iceD_getAllNodeInformation(in, current);
        }
        case 7:
        {
            return _iceD_getAttribute(in, current);
        }
        case 8:
        {
            return _iceD_getPose(in, current);
        }
        case 9:
        {
            return _iceD_getPoseFromParent(in, current);
        }
        case 10:
        {
            return _iceD_getTransformationMatrix(in, current);
        }
        case 11:
        {
            return _iceD_ice_id(in, current);
        }
        case 12:
        {
            return _iceD_ice_ids(in, current);
        }
        case 13:
        {
            return _iceD_ice_isA(in, current);
        }
        case 14:
        {
            return _iceD_ice_ping(in, current);
        }
        case 15:
        {
            return _iceD_moveNode(in, current);
        }
        case 16:
        {
            return _iceD_removeAttribute(in, current);
        }
        case 17:
        {
            return _iceD_removeNode(in, current);
        }
        case 18:
        {
            return _iceD_setAttribute(in, current);
        }
        case 19:
        {
            return _iceD_setPlane(in, current);
        }
        case 20:
        {
            return _iceD_setPointCloudData(in, current);
        }
        case 21:
        {
            return _iceD_setPose(in, current);
        }
        case 22:
        {
            return _iceD_setPoseFromParent(in, current);
        }
        case 23:
        {
            return _iceD_setScale(in, current);
        }
        case 24:
        {
            return _iceD_transform(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_addAttribute(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_idNode, const ::std::string& iceP_name, const ::std::string& iceP_type, const ::std::string& iceP_value, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addAttribute_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addAttribute_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_idNode, iceP_name, iceP_type, iceP_value);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_addJoint(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_item, const ::std::string& iceP_base, const jointType& iceP_j, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addJoint_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addJoint_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_item, iceP_base, iceP_j);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_addMesh(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_item, const ::std::string& iceP_base, const meshType& iceP_m, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addMesh_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addMesh_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_item, iceP_base, iceP_m);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_addPlane(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_item, const ::std::string& iceP_base, const Plane3D& iceP_plane, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addPlane_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addPlane_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_item, iceP_base, iceP_plane);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_addTransform(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_item, const ::std::string& iceP_engine, const ::std::string& iceP_base, const Pose3D& iceP_pose, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addTransform_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addTransform_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_item, iceP_engine, iceP_base, iceP_pose);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_collide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_a, const ::std::string& iceP_b, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_collide_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_collide_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_getAllNodeInformation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompInnerModelManager::NodeInformationSequence>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_getAttribute(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<InnerModelManager::GetAttributeResult>>& outAsync, const ::std::string& iceP_idNode, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_idNode, iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            InnerModelManager::GetAttributeResult v;
            istr->readAll(v.type, v.value, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_getPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<InnerModelManager::GetPoseResult>>& outAsync, const ::std::string& iceP_base, const ::std::string& iceP_item, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_base, iceP_item);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            InnerModelManager::GetPoseResult v;
            istr->readAll(v.pose, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_getPoseFromParent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<InnerModelManager::GetPoseFromParentResult>>& outAsync, const ::std::string& iceP_item, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_item);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            InnerModelManager::GetPoseFromParentResult v;
            istr->readAll(v.pose, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_getTransformationMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompInnerModelManager::Matrix>>& outAsync, const ::std::string& iceP_base, const ::std::string& iceP_item, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getTransformationMatrix_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getTransformationMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_base, iceP_item);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_moveNode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_src, const ::std::string& iceP_dst, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_moveNode_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_moveNode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_src, iceP_dst);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_removeAttribute(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_idNode, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_removeAttribute_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_removeAttribute_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_idNode, iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_removeNode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_item, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_removeNode_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_removeNode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_item);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_setAttribute(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_idNode, const ::std::string& iceP_name, const ::std::string& iceP_type, const ::std::string& iceP_value, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setAttribute_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setAttribute_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_idNode, iceP_name, iceP_type, iceP_value);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_setPlane(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_item, const Plane3D& iceP_plane, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setPlane_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setPlane_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_item, iceP_plane);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_setPointCloudData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const PointCloudVector& iceP_cloud, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setPointCloudData_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_cloud);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_setPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_base, const ::std::string& iceP_item, const Pose3D& iceP_pose, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setPose_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setPose_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_base, iceP_item, iceP_pose);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_setPoseFromParent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_item, const Pose3D& iceP_pose, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setPoseFromParent_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setPoseFromParent_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_item, iceP_pose);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_setScale(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_item, float iceP_scaleX, float iceP_scaleY, float iceP_scaleZ, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setScale_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setScale_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_item, iceP_scaleX, iceP_scaleY, iceP_scaleZ);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::InnerModelManagerPrx::_iceI_transform(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<InnerModelManager::TransformResult>>& outAsync, const ::std::string& iceP_base, const ::std::string& iceP_item, const coord3D& iceP_coordInItem, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_transform_name);
    outAsync->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_transform_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_base, iceP_item, iceP_coordInItem);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InnerModelManagerError&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            InnerModelManager::TransformResult v;
            istr->readAll(v.coordInBase, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompInnerModelManager::InnerModelManagerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<InnerModelManagerPrx>();
}
/// \endcond

const ::std::string&
RoboCompInnerModelManager::InnerModelManagerPrx::ice_staticId()
{
    return InnerModelManager::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addAttribute_name = "addAttribute";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addJoint_name = "addJoint";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addMesh_name = "addMesh";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addPlane_name = "addPlane";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_addTransform_name = "addTransform";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_collide_name = "collide";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name = "getAllNodeInformation";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name = "getAttribute";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name = "getPose";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name = "getPoseFromParent";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_getTransformationMatrix_name = "getTransformationMatrix";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_moveNode_name = "moveNode";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_removeAttribute_name = "removeAttribute";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_removeNode_name = "removeNode";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setAttribute_name = "setAttribute";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setPlane_name = "setPlane";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setPointCloudData_name = "setPointCloudData";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setPose_name = "setPose";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setPoseFromParent_name = "setPoseFromParent";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_setScale_name = "setScale";

const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_transform_name = "transform";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompInnerModelManager::InnerModelManagerError> iceC_RoboCompInnerModelManager_InnerModelManagerError_init("::RoboCompInnerModelManager::InnerModelManagerError");

}

RoboCompInnerModelManager::InnerModelManagerError::InnerModelManagerError(ErrorType err, const ::std::string& text) :
    ::Ice::UserException(),
    err(err),
    text(text)
{
}

RoboCompInnerModelManager::InnerModelManagerError::~InnerModelManagerError() throw()
{
}

::std::string
RoboCompInnerModelManager::InnerModelManagerError::ice_id() const
{
    return "::RoboCompInnerModelManager::InnerModelManagerError";
}

RoboCompInnerModelManager::InnerModelManagerError*
RoboCompInnerModelManager::InnerModelManagerError::ice_clone() const
{
    return new InnerModelManagerError(*this);
}

void
RoboCompInnerModelManager::InnerModelManagerError::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
RoboCompInnerModelManager::InnerModelManagerError::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompInnerModelManager::InnerModelManagerError", -1, true);
    ::Ice::StreamWriter< InnerModelManagerError, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompInnerModelManager::InnerModelManagerError::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< InnerModelManagerError, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompInnerModelManager::upCast(InnerModelManager* p) { return p; }

void
::IceProxy::RoboCompInnerModelManager::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< InnerModelManager>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new InnerModelManager;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_addAttribute(const ::std::string& iceP_idNode, const ::std::string& iceP_name, const ::std::string& iceP_type, const ::std::string& iceP_value, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addAttribute_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_addAttribute_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_addAttribute_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_idNode);
        ostr->write(iceP_name);
        ostr->write(iceP_type);
        ostr->write(iceP_value);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addAttribute_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addAttribute(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_addAttribute_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_addJoint(const ::std::string& iceP_item, const ::std::string& iceP_base, const ::RoboCompInnerModelManager::jointType& iceP_j, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addJoint_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_addJoint_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_addJoint_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_item);
        ostr->write(iceP_base);
        ostr->write(iceP_j);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addJoint_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addJoint(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_addJoint_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_addMesh(const ::std::string& iceP_item, const ::std::string& iceP_base, const ::RoboCompInnerModelManager::meshType& iceP_m, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addMesh_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_addMesh_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_addMesh_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_item);
        ostr->write(iceP_base);
        ostr->write(iceP_m);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addMesh_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addMesh(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_addMesh_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_addPlane(const ::std::string& iceP_item, const ::std::string& iceP_base, const ::RoboCompInnerModelManager::Plane3D& iceP_plane, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addPlane_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_addPlane_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_addPlane_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_item);
        ostr->write(iceP_base);
        ostr->write(iceP_plane);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addPlane_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addPlane(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_addPlane_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_addTransform(const ::std::string& iceP_item, const ::std::string& iceP_engine, const ::std::string& iceP_base, const ::RoboCompInnerModelManager::Pose3D& iceP_pose, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_addTransform_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_addTransform_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_addTransform_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_item);
        ostr->write(iceP_engine);
        ostr->write(iceP_base);
        ostr->write(iceP_pose);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_addTransform_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_addTransform(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_addTransform_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_collide(const ::std::string& iceP_a, const ::std::string& iceP_b, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_collide_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_collide_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_collide_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        ostr->write(iceP_b);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_collide_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_collide(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_collide_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_getAllNodeInformation(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence& iceP_nodesInfo, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_nodesInfo);
    result->_endReadParams();
}

void IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_end_getAllNodeInformation(::RoboCompInnerModelManager::NodeInformationSequence& iceP_nodesInfo, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_getAllNodeInformation_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_nodesInfo);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_getAttribute(const ::std::string& iceP_idNode, const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_idNode);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getAttribute(::std::string& iceP_type, ::std::string& iceP_value, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_type);
    istr->read(iceP_value);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_end_getAttribute(::std::string& iceP_type, ::std::string& iceP_value, bool& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_getAttribute_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_type);
    istr->read(iceP_value);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_getPose(const ::std::string& iceP_base, const ::std::string& iceP_item, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_base);
        ostr->write(iceP_item);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getPose(::RoboCompInnerModelManager::Pose3D& iceP_pose, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_pose);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_end_getPose(::RoboCompInnerModelManager::Pose3D& iceP_pose, bool& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_getPose_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_pose);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_getPoseFromParent(const ::std::string& iceP_item, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_item);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getPoseFromParent(::RoboCompInnerModelManager::Pose3D& iceP_pose, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_pose);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_end_getPoseFromParent(::RoboCompInnerModelManager::Pose3D& iceP_pose, bool& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_getPoseFromParent_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_pose);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_getTransformationMatrix(const ::std::string& iceP_base, const ::std::string& iceP_item, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_getTransformationMatrix_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_getTransformationMatrix_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_getTransformationMatrix_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_base);
        ostr->write(iceP_item);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_getTransformationMatrix_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompInnerModelManager::Matrix
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_getTransformationMatrix(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_getTransformationMatrix_name);
    ::RoboCompInnerModelManager::Matrix ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_moveNode(const ::std::string& iceP_src, const ::std::string& iceP_dst, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_moveNode_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_moveNode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_moveNode_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_src);
        ostr->write(iceP_dst);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_moveNode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_moveNode(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_moveNode_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_removeAttribute(const ::std::string& iceP_idNode, const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_removeAttribute_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_removeAttribute_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_removeAttribute_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_idNode);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_removeAttribute_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_removeAttribute(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_removeAttribute_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_removeNode(const ::std::string& iceP_item, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_removeNode_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_removeNode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_removeNode_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_item);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_removeNode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_removeNode(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_removeNode_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_setAttribute(const ::std::string& iceP_idNode, const ::std::string& iceP_name, const ::std::string& iceP_type, const ::std::string& iceP_value, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setAttribute_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_setAttribute_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_setAttribute_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_idNode);
        ostr->write(iceP_name);
        ostr->write(iceP_type);
        ostr->write(iceP_value);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setAttribute_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setAttribute(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_setAttribute_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_setPlane(const ::std::string& iceP_item, const ::RoboCompInnerModelManager::Plane3D& iceP_plane, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setPlane_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_setPlane_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_setPlane_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_item);
        ostr->write(iceP_plane);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setPlane_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setPlane(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_setPlane_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_setPointCloudData(const ::std::string& iceP_id, const ::RoboCompInnerModelManager::PointCloudVector& iceP_cloud, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_setPointCloudData_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_setPointCloudData_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        ostr->write(iceP_cloud);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setPointCloudData_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setPointCloudData(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompInnerModelManager_InnerModelManager_setPointCloudData_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_setPose(const ::std::string& iceP_base, const ::std::string& iceP_item, const ::RoboCompInnerModelManager::Pose3D& iceP_pose, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setPose_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_setPose_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_setPose_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_base);
        ostr->write(iceP_item);
        ostr->write(iceP_pose);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setPose_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setPose(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_setPose_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_setPoseFromParent(const ::std::string& iceP_item, const ::RoboCompInnerModelManager::Pose3D& iceP_pose, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setPoseFromParent_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_setPoseFromParent_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_setPoseFromParent_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_item);
        ostr->write(iceP_pose);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setPoseFromParent_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setPoseFromParent(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_setPoseFromParent_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_setScale(const ::std::string& iceP_item, ::Ice::Float iceP_scaleX, ::Ice::Float iceP_scaleY, ::Ice::Float iceP_scaleZ, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_setScale_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_setScale_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_setScale_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_item);
        ostr->write(iceP_scaleX);
        ostr->write(iceP_scaleY);
        ostr->write(iceP_scaleZ);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_setScale_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_setScale(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_setScale_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_begin_transform(const ::std::string& iceP_base, const ::std::string& iceP_item, const ::RoboCompInnerModelManager::coord3D& iceP_coordInItem, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompInnerModelManager_InnerModelManager_transform_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompInnerModelManager_InnerModelManager_transform_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompInnerModelManager_InnerModelManager_transform_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_base);
        ostr->write(iceP_item);
        ostr->write(iceP_coordInItem);
        result->endWriteParams();
        result->invoke(iceC_RoboCompInnerModelManager_InnerModelManager_transform_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompInnerModelManager::InnerModelManager::end_transform(::RoboCompInnerModelManager::coord3D& iceP_coordInBase, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_transform_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_coordInBase);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::RoboCompInnerModelManager::InnerModelManager::_iceI_end_transform(::RoboCompInnerModelManager::coord3D& iceP_coordInBase, bool& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompInnerModelManager_InnerModelManager_transform_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompInnerModelManager::InnerModelManagerError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_coordInBase);
    istr->read(ret);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompInnerModelManager::InnerModelManager::_newInstance() const
{
    return new InnerModelManager;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompInnerModelManager::InnerModelManager::ice_staticId()
{
    return ::RoboCompInnerModelManager::InnerModelManager::ice_staticId();
}

RoboCompInnerModelManager::InnerModelManager::~InnerModelManager()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompInnerModelManager::upCast(InnerModelManager* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_ids[2] =
{
    "::Ice::Object",
    "::RoboCompInnerModelManager::InnerModelManager"
};

}

bool
RoboCompInnerModelManager::InnerModelManager::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompInnerModelManager_InnerModelManager_ids, iceC_RoboCompInnerModelManager_InnerModelManager_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompInnerModelManager::InnerModelManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompInnerModelManager_InnerModelManager_ids[0], &iceC_RoboCompInnerModelManager_InnerModelManager_ids[2]);
}

const ::std::string&
RoboCompInnerModelManager::InnerModelManager::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompInnerModelManager::InnerModelManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompInnerModelManager::InnerModelManager";
    return typeId;
#else
    return iceC_RoboCompInnerModelManager_InnerModelManager_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addAttribute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_idNode;
    ::std::string iceP_name;
    ::std::string iceP_type;
    ::std::string iceP_value;
    istr->read(iceP_idNode);
    istr->read(iceP_name);
    istr->read(iceP_type);
    istr->read(iceP_value);
    inS.endReadParams();
    bool ret = this->addAttribute(iceP_idNode, iceP_name, iceP_type, iceP_value, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addJoint(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_item;
    ::std::string iceP_base;
    jointType iceP_j;
    istr->read(iceP_item);
    istr->read(iceP_base);
    istr->read(iceP_j);
    inS.endReadParams();
    bool ret = this->addJoint(iceP_item, iceP_base, iceP_j, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addMesh(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_item;
    ::std::string iceP_base;
    meshType iceP_m;
    istr->read(iceP_item);
    istr->read(iceP_base);
    istr->read(iceP_m);
    inS.endReadParams();
    bool ret = this->addMesh(iceP_item, iceP_base, iceP_m, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addPlane(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_item;
    ::std::string iceP_base;
    Plane3D iceP_plane;
    istr->read(iceP_item);
    istr->read(iceP_base);
    istr->read(iceP_plane);
    inS.endReadParams();
    bool ret = this->addPlane(iceP_item, iceP_base, iceP_plane, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_addTransform(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_item;
    ::std::string iceP_engine;
    ::std::string iceP_base;
    Pose3D iceP_pose;
    istr->read(iceP_item);
    istr->read(iceP_engine);
    istr->read(iceP_base);
    istr->read(iceP_pose);
    inS.endReadParams();
    bool ret = this->addTransform(iceP_item, iceP_engine, iceP_base, iceP_pose, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_collide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_a;
    ::std::string iceP_b;
    istr->read(iceP_a);
    istr->read(iceP_b);
    inS.endReadParams();
    bool ret = this->collide(iceP_a, iceP_b, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getAllNodeInformation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    NodeInformationSequence iceP_nodesInfo;
    this->getAllNodeInformation(iceP_nodesInfo, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_nodesInfo);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getAttribute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_idNode;
    ::std::string iceP_name;
    istr->read(iceP_idNode);
    istr->read(iceP_name);
    inS.endReadParams();
    ::std::string iceP_type;
    ::std::string iceP_value;
    bool ret = this->getAttribute(iceP_idNode, iceP_name, iceP_type, iceP_value, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_type);
    ostr->write(iceP_value);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_base;
    ::std::string iceP_item;
    istr->read(iceP_base);
    istr->read(iceP_item);
    inS.endReadParams();
    Pose3D iceP_pose;
    bool ret = this->getPose(iceP_base, iceP_item, iceP_pose, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_pose);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getPoseFromParent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_item;
    istr->read(iceP_item);
    inS.endReadParams();
    Pose3D iceP_pose;
    bool ret = this->getPoseFromParent(iceP_item, iceP_pose, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_pose);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_getTransformationMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_base;
    ::std::string iceP_item;
    istr->read(iceP_base);
    istr->read(iceP_item);
    inS.endReadParams();
    Matrix ret = this->getTransformationMatrix(iceP_base, iceP_item, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_moveNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_src;
    ::std::string iceP_dst;
    istr->read(iceP_src);
    istr->read(iceP_dst);
    inS.endReadParams();
    bool ret = this->moveNode(iceP_src, iceP_dst, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_removeAttribute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_idNode;
    ::std::string iceP_name;
    istr->read(iceP_idNode);
    istr->read(iceP_name);
    inS.endReadParams();
    bool ret = this->removeAttribute(iceP_idNode, iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_removeNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_item;
    istr->read(iceP_item);
    inS.endReadParams();
    bool ret = this->removeNode(iceP_item, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setAttribute(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_idNode;
    ::std::string iceP_name;
    ::std::string iceP_type;
    ::std::string iceP_value;
    istr->read(iceP_idNode);
    istr->read(iceP_name);
    istr->read(iceP_type);
    istr->read(iceP_value);
    inS.endReadParams();
    bool ret = this->setAttribute(iceP_idNode, iceP_name, iceP_type, iceP_value, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setPlane(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_item;
    Plane3D iceP_plane;
    istr->read(iceP_item);
    istr->read(iceP_plane);
    inS.endReadParams();
    bool ret = this->setPlane(iceP_item, iceP_plane, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setPointCloudData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    PointCloudVector iceP_cloud;
    istr->read(iceP_id);
    istr->read(iceP_cloud);
    inS.endReadParams();
    this->setPointCloudData(iceP_id, iceP_cloud, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setPose(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_base;
    ::std::string iceP_item;
    Pose3D iceP_pose;
    istr->read(iceP_base);
    istr->read(iceP_item);
    istr->read(iceP_pose);
    inS.endReadParams();
    bool ret = this->setPose(iceP_base, iceP_item, iceP_pose, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setPoseFromParent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_item;
    Pose3D iceP_pose;
    istr->read(iceP_item);
    istr->read(iceP_pose);
    inS.endReadParams();
    bool ret = this->setPoseFromParent(iceP_item, iceP_pose, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_setScale(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_item;
    ::Ice::Float iceP_scaleX;
    ::Ice::Float iceP_scaleY;
    ::Ice::Float iceP_scaleZ;
    istr->read(iceP_item);
    istr->read(iceP_scaleX);
    istr->read(iceP_scaleY);
    istr->read(iceP_scaleZ);
    inS.endReadParams();
    bool ret = this->setScale(iceP_item, iceP_scaleX, iceP_scaleY, iceP_scaleZ, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceD_transform(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_base;
    ::std::string iceP_item;
    coord3D iceP_coordInItem;
    istr->read(iceP_base);
    istr->read(iceP_item);
    istr->read(iceP_coordInItem);
    inS.endReadParams();
    coord3D iceP_coordInBase;
    bool ret = this->transform(iceP_base, iceP_item, iceP_coordInItem, iceP_coordInBase, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_coordInBase);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompInnerModelManager_InnerModelManager_all[] =
{
    "addAttribute",
    "addJoint",
    "addMesh",
    "addPlane",
    "addTransform",
    "collide",
    "getAllNodeInformation",
    "getAttribute",
    "getPose",
    "getPoseFromParent",
    "getTransformationMatrix",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "moveNode",
    "removeAttribute",
    "removeNode",
    "setAttribute",
    "setPlane",
    "setPointCloudData",
    "setPose",
    "setPoseFromParent",
    "setScale",
    "transform"
};

}

/// \cond INTERNAL
bool
RoboCompInnerModelManager::InnerModelManager::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompInnerModelManager_InnerModelManager_all, iceC_RoboCompInnerModelManager_InnerModelManager_all + 25, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompInnerModelManager_InnerModelManager_all)
    {
        case 0:
        {
            return _iceD_addAttribute(in, current);
        }
        case 1:
        {
            return _iceD_addJoint(in, current);
        }
        case 2:
        {
            return _iceD_addMesh(in, current);
        }
        case 3:
        {
            return _iceD_addPlane(in, current);
        }
        case 4:
        {
            return _iceD_addTransform(in, current);
        }
        case 5:
        {
            return _iceD_collide(in, current);
        }
        case 6:
        {
            return _iceD_getAllNodeInformation(in, current);
        }
        case 7:
        {
            return _iceD_getAttribute(in, current);
        }
        case 8:
        {
            return _iceD_getPose(in, current);
        }
        case 9:
        {
            return _iceD_getPoseFromParent(in, current);
        }
        case 10:
        {
            return _iceD_getTransformationMatrix(in, current);
        }
        case 11:
        {
            return _iceD_ice_id(in, current);
        }
        case 12:
        {
            return _iceD_ice_ids(in, current);
        }
        case 13:
        {
            return _iceD_ice_isA(in, current);
        }
        case 14:
        {
            return _iceD_ice_ping(in, current);
        }
        case 15:
        {
            return _iceD_moveNode(in, current);
        }
        case 16:
        {
            return _iceD_removeAttribute(in, current);
        }
        case 17:
        {
            return _iceD_removeNode(in, current);
        }
        case 18:
        {
            return _iceD_setAttribute(in, current);
        }
        case 19:
        {
            return _iceD_setPlane(in, current);
        }
        case 20:
        {
            return _iceD_setPointCloudData(in, current);
        }
        case 21:
        {
            return _iceD_setPose(in, current);
        }
        case 22:
        {
            return _iceD_setPoseFromParent(in, current);
        }
        case 23:
        {
            return _iceD_setScale(in, current);
        }
        case 24:
        {
            return _iceD_transform(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompInnerModelManager::InnerModelManager::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< InnerModelManager, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompInnerModelManager::InnerModelManager::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< InnerModelManager, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompInnerModelManager::_icePatchObjectPtr(InnerModelManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = InnerModelManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(InnerModelManager::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
