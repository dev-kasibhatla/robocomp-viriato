// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Planning.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Planning_h__
#define __Planning_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompPlanning
{

class PlanReceiver;
class PlanReceiverPrx;
class Planning;
class PlanningPrx;
class PeleaAgent;
class PeleaAgentPrx;

}

namespace RoboCompPlanning
{

class ServerException : public ::Ice::UserExceptionHelper<ServerException, ::Ice::UserException>
{
public:

    virtual ~ServerException();

    ServerException(const ServerException&) = default;

    ServerException() = default;

    ServerException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

static ServerException _iceS_ServerException_init;

using StringVector = ::std::vector<::std::string>;

using StringDictionary = ::std::map<::std::string, ::std::string>;

struct Action
{
    ::std::string name;
    ::RoboCompPlanning::StringVector symbols;

    std::tuple<const ::std::string&, const ::RoboCompPlanning::StringVector&> ice_tuple() const
    {
        return std::tie(name, symbols);
    }
};

using ActionSequence = ::std::vector<::RoboCompPlanning::Action>;

struct Plan
{
    ::RoboCompPlanning::ActionSequence actions;
    float cost;

    std::tuple<const ::RoboCompPlanning::ActionSequence&, const float&> ice_tuple() const
    {
        return std::tie(actions, cost);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompPlanning
{

class PlanReceiver : public virtual ::Ice::Object
{
public:

    using ProxyType = PlanReceiverPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void setPlan(::RoboCompPlanning::Plan, const ::Ice::Current&) = 0;
    bool _iceD_setPlan(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class Planning : public virtual ::Ice::Object
{
public:

    using ProxyType = PlanningPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    struct GetNextActionResult
    {
        bool returnValue;
        ::RoboCompPlanning::Plan solution;
    };

    virtual bool getNextAction(::std::string, ::RoboCompPlanning::Plan&, const ::Ice::Current&) = 0;
    bool _iceD_getNextAction(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetSolutionResult
    {
        bool returnValue;
        ::RoboCompPlanning::Plan solution;
    };

    virtual bool getSolution(::std::string, ::std::string, ::RoboCompPlanning::Plan&, const ::Ice::Current&) = 0;
    bool _iceD_getSolution(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class PeleaAgent : public virtual ::Ice::Object
{
public:

    using ProxyType = PeleaAgentPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void stateChanged(::RoboCompPlanning::StringDictionary, const ::Ice::Current&) = 0;
    bool _iceD_stateChanged(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompPlanning
{

class PlanReceiverPrx : public virtual ::Ice::Proxy<PlanReceiverPrx, ::Ice::ObjectPrx>
{
public:

    void setPlan(const ::RoboCompPlanning::Plan& iceP_p, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompPlanning::PlanReceiverPrx::_iceI_setPlan, iceP_p, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPlanAsync(const ::RoboCompPlanning::Plan& iceP_p, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompPlanning::PlanReceiverPrx::_iceI_setPlan, iceP_p, context);
    }

    ::std::function<void()>
    setPlanAsync(const ::RoboCompPlanning::Plan& iceP_p,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompPlanning::PlanReceiverPrx::_iceI_setPlan, iceP_p, context);
    }

    void _iceI_setPlan(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompPlanning::Plan&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    PlanReceiverPrx() = default;
    friend ::std::shared_ptr<PlanReceiverPrx> IceInternal::createProxy<PlanReceiverPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class PlanningPrx : public virtual ::Ice::Proxy<PlanningPrx, ::Ice::ObjectPrx>
{
public:

    bool getNextAction(const ::std::string& iceP_Problem, ::RoboCompPlanning::Plan& iceP_solution, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompPlanning::Planning::GetNextActionResult>(true, this, &RoboCompPlanning::PlanningPrx::_iceI_getNextAction, iceP_Problem, context).get();
        iceP_solution = ::std::move(result.solution);
        return result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto getNextActionAsync(const ::std::string& iceP_Problem, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompPlanning::Planning::GetNextActionResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompPlanning::Planning::GetNextActionResult, P>(false, this, &RoboCompPlanning::PlanningPrx::_iceI_getNextAction, iceP_Problem, context);
    }

    ::std::function<void()>
    getNextActionAsync(const ::std::string& iceP_Problem,
                       ::std::function<void(bool, ::RoboCompPlanning::Plan)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompPlanning::Planning::GetNextActionResult&& result)
        {
            response(result.returnValue, ::std::move(result.solution));
        };
        return _makeLamdaOutgoing<::RoboCompPlanning::Planning::GetNextActionResult>(responseCb, ex, sent, this, &RoboCompPlanning::PlanningPrx::_iceI_getNextAction, iceP_Problem, context);
    }

    void _iceI_getNextAction(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompPlanning::Planning::GetNextActionResult>>&, const ::std::string&, const ::Ice::Context&);

    bool getSolution(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, ::RoboCompPlanning::Plan& iceP_solution, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompPlanning::Planning::GetSolutionResult>(true, this, &RoboCompPlanning::PlanningPrx::_iceI_getSolution, iceP_Domain, iceP_Problem, context).get();
        iceP_solution = ::std::move(result.solution);
        return result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto getSolutionAsync(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompPlanning::Planning::GetSolutionResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompPlanning::Planning::GetSolutionResult, P>(false, this, &RoboCompPlanning::PlanningPrx::_iceI_getSolution, iceP_Domain, iceP_Problem, context);
    }

    ::std::function<void()>
    getSolutionAsync(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem,
                     ::std::function<void(bool, ::RoboCompPlanning::Plan)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompPlanning::Planning::GetSolutionResult&& result)
        {
            response(result.returnValue, ::std::move(result.solution));
        };
        return _makeLamdaOutgoing<::RoboCompPlanning::Planning::GetSolutionResult>(responseCb, ex, sent, this, &RoboCompPlanning::PlanningPrx::_iceI_getSolution, iceP_Domain, iceP_Problem, context);
    }

    void _iceI_getSolution(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompPlanning::Planning::GetSolutionResult>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    PlanningPrx() = default;
    friend ::std::shared_ptr<PlanningPrx> IceInternal::createProxy<PlanningPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class PeleaAgentPrx : public virtual ::Ice::Proxy<PeleaAgentPrx, ::Ice::ObjectPrx>
{
public:

    void stateChanged(const ::RoboCompPlanning::StringDictionary& iceP_state, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompPlanning::PeleaAgentPrx::_iceI_stateChanged, iceP_state, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stateChangedAsync(const ::RoboCompPlanning::StringDictionary& iceP_state, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompPlanning::PeleaAgentPrx::_iceI_stateChanged, iceP_state, context);
    }

    ::std::function<void()>
    stateChangedAsync(const ::RoboCompPlanning::StringDictionary& iceP_state,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompPlanning::PeleaAgentPrx::_iceI_stateChanged, iceP_state, context);
    }

    void _iceI_stateChanged(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompPlanning::StringDictionary&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    PeleaAgentPrx() = default;
    friend ::std::shared_ptr<PeleaAgentPrx> IceInternal::createProxy<PeleaAgentPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompPlanning::ServerException, S>
{
    static void read(S* istr, ::RoboCompPlanning::ServerException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompPlanning::Action>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompPlanning::Action, S>
{
    static void read(S* istr, ::RoboCompPlanning::Action& v)
    {
        istr->readAll(v.name, v.symbols);
    }
};

template<>
struct StreamableTraits<::RoboCompPlanning::Plan>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompPlanning::Plan, S>
{
    static void read(S* istr, ::RoboCompPlanning::Plan& v)
    {
        istr->readAll(v.actions, v.cost);
    }
};

}

namespace RoboCompPlanning
{

using PlanReceiverPtr = ::std::shared_ptr<PlanReceiver>;
using PlanReceiverPrxPtr = ::std::shared_ptr<PlanReceiverPrx>;

using PlanningPtr = ::std::shared_ptr<Planning>;
using PlanningPrxPtr = ::std::shared_ptr<PlanningPrx>;

using PeleaAgentPtr = ::std::shared_ptr<PeleaAgent>;
using PeleaAgentPrxPtr = ::std::shared_ptr<PeleaAgentPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompPlanning
{

class PlanReceiver;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::PlanReceiver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompPlanning::PlanReceiver*);

class Planning;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::Planning>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompPlanning::Planning*);

class PeleaAgent;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::PeleaAgent>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompPlanning::PeleaAgent*);

}

}

namespace RoboCompPlanning
{

class PlanReceiver;
::Ice::Object* upCast(::RoboCompPlanning::PlanReceiver*);
typedef ::IceInternal::Handle< ::RoboCompPlanning::PlanReceiver> PlanReceiverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::PlanReceiver> PlanReceiverPrx;
typedef PlanReceiverPrx PlanReceiverPrxPtr;
void _icePatchObjectPtr(PlanReceiverPtr&, const ::Ice::ObjectPtr&);

class Planning;
::Ice::Object* upCast(::RoboCompPlanning::Planning*);
typedef ::IceInternal::Handle< ::RoboCompPlanning::Planning> PlanningPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::Planning> PlanningPrx;
typedef PlanningPrx PlanningPrxPtr;
void _icePatchObjectPtr(PlanningPtr&, const ::Ice::ObjectPtr&);

class PeleaAgent;
::Ice::Object* upCast(::RoboCompPlanning::PeleaAgent*);
typedef ::IceInternal::Handle< ::RoboCompPlanning::PeleaAgent> PeleaAgentPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompPlanning::PeleaAgent> PeleaAgentPrx;
typedef PeleaAgentPrx PeleaAgentPrxPtr;
void _icePatchObjectPtr(PeleaAgentPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompPlanning
{

class ServerException : public ::Ice::UserException
{
public:

    ServerException() {}
    explicit ServerException(const ::std::string&);
    virtual ~ServerException() throw();

    virtual ::std::string ice_id() const;
    virtual ServerException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

static ServerException _iceS_ServerException_init;

typedef ::std::vector< ::std::string> StringVector;

typedef ::std::map< ::std::string, ::std::string> StringDictionary;

struct Action
{
    ::std::string name;
    ::RoboCompPlanning::StringVector symbols;
};

typedef ::std::vector< ::RoboCompPlanning::Action> ActionSequence;

struct Plan
{
    ::RoboCompPlanning::ActionSequence actions;
    ::Ice::Float cost;
};

}

namespace RoboCompPlanning
{

class Callback_PlanReceiver_setPlan_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PlanReceiver_setPlan_Base> Callback_PlanReceiver_setPlanPtr;

class Callback_Planning_getNextAction_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Planning_getNextAction_Base> Callback_Planning_getNextActionPtr;

class Callback_Planning_getSolution_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Planning_getSolution_Base> Callback_Planning_getSolutionPtr;

class Callback_PeleaAgent_stateChanged_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PeleaAgent_stateChanged_Base> Callback_PeleaAgent_stateChangedPtr;

}

namespace IceProxy
{

namespace RoboCompPlanning
{

class PlanReceiver : public virtual ::Ice::Proxy<PlanReceiver, ::IceProxy::Ice::Object>
{
public:

    void setPlan(const ::RoboCompPlanning::Plan& iceP_p, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setPlan(_iceI_begin_setPlan(iceP_p, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& iceP_p, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPlan(iceP_p, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& iceP_p, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPlan(iceP_p, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& iceP_p, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPlan(iceP_p, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& iceP_p, const ::RoboCompPlanning::Callback_PlanReceiver_setPlanPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPlan(iceP_p, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPlan(const ::RoboCompPlanning::Plan& iceP_p, const ::Ice::Context& context, const ::RoboCompPlanning::Callback_PlanReceiver_setPlanPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPlan(iceP_p, context, del, cookie);
    }

    void end_setPlan(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPlan(const ::RoboCompPlanning::Plan&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class Planning : public virtual ::Ice::Proxy<Planning, ::IceProxy::Ice::Object>
{
public:

    bool getNextAction(const ::std::string& iceP_Problem, ::RoboCompPlanning::Plan& iceP_solution, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getNextAction(iceP_solution, _iceI_begin_getNextAction(iceP_Problem, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& iceP_Problem, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getNextAction(iceP_Problem, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& iceP_Problem, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNextAction(iceP_Problem, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& iceP_Problem, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNextAction(iceP_Problem, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& iceP_Problem, const ::RoboCompPlanning::Callback_Planning_getNextActionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNextAction(iceP_Problem, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNextAction(const ::std::string& iceP_Problem, const ::Ice::Context& context, const ::RoboCompPlanning::Callback_Planning_getNextActionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNextAction(iceP_Problem, context, del, cookie);
    }

    bool end_getNextAction(::RoboCompPlanning::Plan& iceP_solution, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getNextAction(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool getSolution(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, ::RoboCompPlanning::Plan& iceP_solution, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getSolution(iceP_solution, _iceI_begin_getSolution(iceP_Domain, iceP_Problem, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getSolution(iceP_Domain, iceP_Problem, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSolution(iceP_Domain, iceP_Problem, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSolution(iceP_Domain, iceP_Problem, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, const ::RoboCompPlanning::Callback_Planning_getSolutionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSolution(iceP_Domain, iceP_Problem, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSolution(const ::std::string& iceP_Domain, const ::std::string& iceP_Problem, const ::Ice::Context& context, const ::RoboCompPlanning::Callback_Planning_getSolutionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSolution(iceP_Domain, iceP_Problem, context, del, cookie);
    }

    bool end_getSolution(::RoboCompPlanning::Plan& iceP_solution, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getSolution(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class PeleaAgent : public virtual ::Ice::Proxy<PeleaAgent, ::IceProxy::Ice::Object>
{
public:

    void stateChanged(const ::RoboCompPlanning::StringDictionary& iceP_state, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_stateChanged(_iceI_begin_stateChanged(iceP_state, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& iceP_state, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stateChanged(iceP_state, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& iceP_state, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stateChanged(iceP_state, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& iceP_state, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stateChanged(iceP_state, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& iceP_state, const ::RoboCompPlanning::Callback_PeleaAgent_stateChangedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stateChanged(iceP_state, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stateChanged(const ::RoboCompPlanning::StringDictionary& iceP_state, const ::Ice::Context& context, const ::RoboCompPlanning::Callback_PeleaAgent_stateChangedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stateChanged(iceP_state, context, del, cookie);
    }

    void end_stateChanged(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stateChanged(const ::RoboCompPlanning::StringDictionary&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompPlanning
{

class PlanReceiver : public virtual ::Ice::Object
{
public:

    typedef PlanReceiverPrx ProxyType;
    typedef PlanReceiverPtr PointerType;

    virtual ~PlanReceiver();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void setPlan(const ::RoboCompPlanning::Plan&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setPlan(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const PlanReceiver& lhs, const PlanReceiver& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const PlanReceiver& lhs, const PlanReceiver& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class Planning : public virtual ::Ice::Object
{
public:

    typedef PlanningPrx ProxyType;
    typedef PlanningPtr PointerType;

    virtual ~Planning();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual bool getNextAction(const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getNextAction(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getSolution(const ::std::string&, const ::std::string&, ::RoboCompPlanning::Plan&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getSolution(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const Planning& lhs, const Planning& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Planning& lhs, const Planning& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class PeleaAgent : public virtual ::Ice::Object
{
public:

    typedef PeleaAgentPrx ProxyType;
    typedef PeleaAgentPtr PointerType;

    virtual ~PeleaAgent();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void stateChanged(const ::RoboCompPlanning::StringDictionary&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_stateChanged(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const PeleaAgent& lhs, const PeleaAgent& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const PeleaAgent& lhs, const PeleaAgent& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompPlanning::ServerException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompPlanning::ServerException, S>
{
    static void write(S* ostr, const ::RoboCompPlanning::ServerException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompPlanning::ServerException, S>
{
    static void read(S* istr, ::RoboCompPlanning::ServerException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompPlanning::Action>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompPlanning::Action, S>
{
    static void write(S* ostr, const ::RoboCompPlanning::Action& v)
    {
        ostr->write(v.name);
        ostr->write(v.symbols);
    }
};

template<typename S>
struct StreamReader< ::RoboCompPlanning::Action, S>
{
    static void read(S* istr, ::RoboCompPlanning::Action& v)
    {
        istr->read(v.name);
        istr->read(v.symbols);
    }
};

template<>
struct StreamableTraits< ::RoboCompPlanning::Plan>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompPlanning::Plan, S>
{
    static void write(S* ostr, const ::RoboCompPlanning::Plan& v)
    {
        ostr->write(v.actions);
        ostr->write(v.cost);
    }
};

template<typename S>
struct StreamReader< ::RoboCompPlanning::Plan, S>
{
    static void read(S* istr, ::RoboCompPlanning::Plan& v)
    {
        istr->read(v.actions);
        istr->read(v.cost);
    }
};

}

namespace RoboCompPlanning
{

template<class T>
class CallbackNC_PlanReceiver_setPlan : public Callback_PlanReceiver_setPlan_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PlanReceiver_setPlan(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlanReceiver_setPlan<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlanReceiver_setPlan<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlanReceiver_setPlan<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PlanReceiver_setPlan<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PlanReceiver_setPlan : public Callback_PlanReceiver_setPlan_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PlanReceiver_setPlan(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlanReceiver_setPlan<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlanReceiver_setPlan<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlanReceiver_setPlan<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PlanReceiver_setPlanPtr
newCallback_PlanReceiver_setPlan(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PlanReceiver_setPlan<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Planning_getNextAction : public Callback_Planning_getNextAction_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RoboCompPlanning::Plan&);

    CallbackNC_Planning_getNextAction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompPlanning::PlanningPrx proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(result->getProxy());
        ::RoboCompPlanning::Plan iceP_solution;
        bool ret;
        try
        {
            ret = proxy->end_getNextAction(iceP_solution, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_solution);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Planning_getNextActionPtr
newCallback_Planning_getNextAction(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Planning_getNextAction<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Planning_getNextActionPtr
newCallback_Planning_getNextAction(T* instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Planning_getNextAction<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Planning_getNextAction : public Callback_Planning_getNextAction_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RoboCompPlanning::Plan&, const CT&);

    Callback_Planning_getNextAction(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompPlanning::PlanningPrx proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(result->getProxy());
        ::RoboCompPlanning::Plan iceP_solution;
        bool ret;
        try
        {
            ret = proxy->end_getNextAction(iceP_solution, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_solution, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Planning_getNextActionPtr
newCallback_Planning_getNextAction(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Planning_getNextAction<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Planning_getNextActionPtr
newCallback_Planning_getNextAction(T* instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Planning_getNextAction<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Planning_getSolution : public Callback_Planning_getSolution_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RoboCompPlanning::Plan&);

    CallbackNC_Planning_getSolution(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompPlanning::PlanningPrx proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(result->getProxy());
        ::RoboCompPlanning::Plan iceP_solution;
        bool ret;
        try
        {
            ret = proxy->end_getSolution(iceP_solution, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_solution);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Planning_getSolutionPtr
newCallback_Planning_getSolution(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Planning_getSolution<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Planning_getSolutionPtr
newCallback_Planning_getSolution(T* instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Planning_getSolution<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Planning_getSolution : public Callback_Planning_getSolution_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RoboCompPlanning::Plan&, const CT&);

    Callback_Planning_getSolution(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompPlanning::PlanningPrx proxy = ::RoboCompPlanning::PlanningPrx::uncheckedCast(result->getProxy());
        ::RoboCompPlanning::Plan iceP_solution;
        bool ret;
        try
        {
            ret = proxy->end_getSolution(iceP_solution, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_solution, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Planning_getSolutionPtr
newCallback_Planning_getSolution(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Planning_getSolution<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Planning_getSolutionPtr
newCallback_Planning_getSolution(T* instance, void (T::*cb)(bool, const ::RoboCompPlanning::Plan&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Planning_getSolution<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PeleaAgent_stateChanged : public Callback_PeleaAgent_stateChanged_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PeleaAgent_stateChanged(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeleaAgent_stateChanged<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeleaAgent_stateChanged<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeleaAgent_stateChanged<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PeleaAgent_stateChanged<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PeleaAgent_stateChanged : public Callback_PeleaAgent_stateChanged_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PeleaAgent_stateChanged(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeleaAgent_stateChanged<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeleaAgent_stateChanged<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeleaAgent_stateChanged<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PeleaAgent_stateChangedPtr
newCallback_PeleaAgent_stateChanged(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PeleaAgent_stateChanged<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
