// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `AGMCommonBehavior.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __AGMCommonBehavior_h__
#define __AGMCommonBehavior_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior;
class AGMCommonBehaviorPrx;

}

namespace RoboCompAGMCommonBehavior
{

enum class StateEnum : unsigned char
{
    Starting,
    Running,
    Stopped
};

struct StateStruct
{
    ::RoboCompAGMCommonBehavior::StateEnum state;
    ::std::string info;

    std::tuple<const ::RoboCompAGMCommonBehavior::StateEnum&, const ::std::string&> ice_tuple() const
    {
        return std::tie(state, info);
    }
};

struct Parameter
{
    bool editable;
    ::std::string value;
    ::std::string type;

    std::tuple<const bool&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(editable, value, type);
    }
};

using ParameterMap = ::std::map<::std::string, ::RoboCompAGMCommonBehavior::Parameter>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior : public virtual ::Ice::Object
{
public:

    using ProxyType = AGMCommonBehaviorPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual bool activateAgent(::RoboCompAGMCommonBehavior::ParameterMap, const ::Ice::Current&) = 0;
    bool _iceD_activateAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool deactivateAgent(const ::Ice::Current&) = 0;
    bool _iceD_deactivateAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Current&) = 0;
    bool _iceD_getAgentParameters(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Current&) = 0;
    bool _iceD_getAgentState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void killAgent(const ::Ice::Current&) = 0;
    bool _iceD_killAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool reloadConfigAgent(const ::Ice::Current&) = 0;
    bool _iceD_reloadConfigAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setAgentParameters(::RoboCompAGMCommonBehavior::ParameterMap, const ::Ice::Current&) = 0;
    bool _iceD_setAgentParameters(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual int uptimeAgent(const ::Ice::Current&) = 0;
    bool _iceD_uptimeAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehaviorPrx : public virtual ::Ice::Proxy<AGMCommonBehaviorPrx, ::Ice::ObjectPrx>
{
public:

    bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_activateAgent, iceP_prs, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto activateAgentAsync(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_activateAgent, iceP_prs, context);
    }

    ::std::function<void()>
    activateAgentAsync(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs,
                       ::std::function<void(bool)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_activateAgent, iceP_prs, context);
    }

    void _iceI_activateAgent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context&);

    bool deactivateAgent(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_deactivateAgent, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto deactivateAgentAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_deactivateAgent, context);
    }

    ::std::function<void()>
    deactivateAgentAsync(::std::function<void(bool)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_deactivateAgent, context);
    }

    void _iceI_deactivateAgent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);

    ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompAGMCommonBehavior::ParameterMap>(true, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_getAgentParameters, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAgentParametersAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompAGMCommonBehavior::ParameterMap>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompAGMCommonBehavior::ParameterMap, P>(false, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_getAgentParameters, context);
    }

    ::std::function<void()>
    getAgentParametersAsync(::std::function<void(::RoboCompAGMCommonBehavior::ParameterMap)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompAGMCommonBehavior::ParameterMap>(response, ex, sent, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_getAgentParameters, context);
    }

    void _iceI_getAgentParameters(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompAGMCommonBehavior::ParameterMap>>&, const ::Ice::Context&);

    ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompAGMCommonBehavior::StateStruct>(true, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_getAgentState, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAgentStateAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompAGMCommonBehavior::StateStruct>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompAGMCommonBehavior::StateStruct, P>(false, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_getAgentState, context);
    }

    ::std::function<void()>
    getAgentStateAsync(::std::function<void(::RoboCompAGMCommonBehavior::StateStruct)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompAGMCommonBehavior::StateStruct>(response, ex, sent, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_getAgentState, context);
    }

    void _iceI_getAgentState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompAGMCommonBehavior::StateStruct>>&, const ::Ice::Context&);

    void killAgent(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_killAgent, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto killAgentAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_killAgent, context);
    }

    ::std::function<void()>
    killAgentAsync(::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_killAgent, context);
    }

    void _iceI_killAgent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    bool reloadConfigAgent(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_reloadConfigAgent, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto reloadConfigAgentAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_reloadConfigAgent, context);
    }

    ::std::function<void()>
    reloadConfigAgentAsync(::std::function<void(bool)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_reloadConfigAgent, context);
    }

    void _iceI_reloadConfigAgent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);

    bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_setAgentParameters, iceP_prs, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setAgentParametersAsync(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_setAgentParameters, iceP_prs, context);
    }

    ::std::function<void()>
    setAgentParametersAsync(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs,
                            ::std::function<void(bool)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_setAgentParameters, iceP_prs, context);
    }

    void _iceI_setAgentParameters(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context&);

    int uptimeAgent(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_uptimeAgent, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto uptimeAgentAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_uptimeAgent, context);
    }

    ::std::function<void()>
    uptimeAgentAsync(::std::function<void(int)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::_iceI_uptimeAgent, context);
    }

    void _iceI_uptimeAgent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    AGMCommonBehaviorPrx() = default;
    friend ::std::shared_ptr<AGMCommonBehaviorPrx> IceInternal::createProxy<AGMCommonBehaviorPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompAGMCommonBehavior::StateEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::RoboCompAGMCommonBehavior::StateStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompAGMCommonBehavior::StateStruct, S>
{
    static void read(S* istr, ::RoboCompAGMCommonBehavior::StateStruct& v)
    {
        istr->readAll(v.state, v.info);
    }
};

template<>
struct StreamableTraits<::RoboCompAGMCommonBehavior::Parameter>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompAGMCommonBehavior::Parameter, S>
{
    static void read(S* istr, ::RoboCompAGMCommonBehavior::Parameter& v)
    {
        istr->readAll(v.editable, v.value, v.type);
    }
};

}

namespace RoboCompAGMCommonBehavior
{

using AGMCommonBehaviorPtr = ::std::shared_ptr<AGMCommonBehavior>;
using AGMCommonBehaviorPrxPtr = ::std::shared_ptr<AGMCommonBehaviorPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMCommonBehavior::AGMCommonBehavior>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompAGMCommonBehavior::AGMCommonBehavior*);

}

}

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior;
::Ice::Object* upCast(::RoboCompAGMCommonBehavior::AGMCommonBehavior*);
typedef ::IceInternal::Handle< ::RoboCompAGMCommonBehavior::AGMCommonBehavior> AGMCommonBehaviorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMCommonBehavior::AGMCommonBehavior> AGMCommonBehaviorPrx;
typedef AGMCommonBehaviorPrx AGMCommonBehaviorPrxPtr;
void _icePatchObjectPtr(AGMCommonBehaviorPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompAGMCommonBehavior
{

enum StateEnum
{
    Starting,
    Running,
    Stopped
};

struct StateStruct
{
    ::RoboCompAGMCommonBehavior::StateEnum state;
    ::std::string info;

    bool operator==(const StateStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(state != rhs_.state)
        {
            return false;
        }
        if(info != rhs_.info)
        {
            return false;
        }
        return true;
    }

    bool operator<(const StateStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(state < rhs_.state)
        {
            return true;
        }
        else if(rhs_.state < state)
        {
            return false;
        }
        if(info < rhs_.info)
        {
            return true;
        }
        else if(rhs_.info < info)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const StateStruct& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const StateStruct& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const StateStruct& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const StateStruct& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct Parameter
{
    bool editable;
    ::std::string value;
    ::std::string type;

    bool operator==(const Parameter& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(editable != rhs_.editable)
        {
            return false;
        }
        if(value != rhs_.value)
        {
            return false;
        }
        if(type != rhs_.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Parameter& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(editable < rhs_.editable)
        {
            return true;
        }
        else if(rhs_.editable < editable)
        {
            return false;
        }
        if(value < rhs_.value)
        {
            return true;
        }
        else if(rhs_.value < value)
        {
            return false;
        }
        if(type < rhs_.type)
        {
            return true;
        }
        else if(rhs_.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Parameter& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Parameter& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Parameter& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Parameter& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, ::RoboCompAGMCommonBehavior::Parameter> ParameterMap;

}

namespace RoboCompAGMCommonBehavior
{

class Callback_AGMCommonBehavior_activateAgent_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_activateAgent_Base> Callback_AGMCommonBehavior_activateAgentPtr;

class Callback_AGMCommonBehavior_deactivateAgent_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_deactivateAgent_Base> Callback_AGMCommonBehavior_deactivateAgentPtr;

class Callback_AGMCommonBehavior_getAgentParameters_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_getAgentParameters_Base> Callback_AGMCommonBehavior_getAgentParametersPtr;

class Callback_AGMCommonBehavior_getAgentState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_getAgentState_Base> Callback_AGMCommonBehavior_getAgentStatePtr;

class Callback_AGMCommonBehavior_killAgent_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_killAgent_Base> Callback_AGMCommonBehavior_killAgentPtr;

class Callback_AGMCommonBehavior_reloadConfigAgent_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_reloadConfigAgent_Base> Callback_AGMCommonBehavior_reloadConfigAgentPtr;

class Callback_AGMCommonBehavior_setAgentParameters_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_setAgentParameters_Base> Callback_AGMCommonBehavior_setAgentParametersPtr;

class Callback_AGMCommonBehavior_uptimeAgent_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMCommonBehavior_uptimeAgent_Base> Callback_AGMCommonBehavior_uptimeAgentPtr;

}

namespace IceProxy
{

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior : public virtual ::Ice::Proxy<AGMCommonBehavior, ::IceProxy::Ice::Object>
{
public:

    bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_activateAgent(_iceI_begin_activateAgent(iceP_prs, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_activateAgent(iceP_prs, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activateAgent(iceP_prs, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activateAgent(iceP_prs, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_activateAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activateAgent(iceP_prs, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_activateAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activateAgent(iceP_prs, context, del, cookie);
    }

    bool end_activateAgent(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool deactivateAgent(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_deactivateAgent(_iceI_begin_deactivateAgent(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_deactivateAgent(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivateAgent(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivateAgent(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_deactivateAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivateAgent(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivateAgent(const ::Ice::Context& context, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_deactivateAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivateAgent(context, del, cookie);
    }

    bool end_deactivateAgent(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_deactivateAgent(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAgentParameters(_iceI_begin_getAgentParameters(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAgentParameters(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAgentParameters(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAgentParameters(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_getAgentParametersPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAgentParameters(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentParameters(const ::Ice::Context& context, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_getAgentParametersPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAgentParameters(context, del, cookie);
    }

    ::RoboCompAGMCommonBehavior::ParameterMap end_getAgentParameters(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAgentParameters(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAgentState(_iceI_begin_getAgentState(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAgentState(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAgentState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAgentState(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_getAgentStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAgentState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAgentState(const ::Ice::Context& context, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_getAgentStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAgentState(context, del, cookie);
    }

    ::RoboCompAGMCommonBehavior::StateStruct end_getAgentState(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAgentState(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void killAgent(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_killAgent(_iceI_begin_killAgent(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_killAgent(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_killAgent(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_killAgent(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_killAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_killAgent(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_killAgent(const ::Ice::Context& context, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_killAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_killAgent(context, del, cookie);
    }

    void end_killAgent(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_killAgent(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool reloadConfigAgent(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_reloadConfigAgent(_iceI_begin_reloadConfigAgent(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_reloadConfigAgent(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reloadConfigAgent(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reloadConfigAgent(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_reloadConfigAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reloadConfigAgent(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_reloadConfigAgent(const ::Ice::Context& context, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_reloadConfigAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_reloadConfigAgent(context, del, cookie);
    }

    bool end_reloadConfigAgent(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_reloadConfigAgent(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_setAgentParameters(_iceI_begin_setAgentParameters(iceP_prs, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setAgentParameters(iceP_prs, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setAgentParameters(iceP_prs, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setAgentParameters(iceP_prs, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_setAgentParametersPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setAgentParameters(iceP_prs, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap& iceP_prs, const ::Ice::Context& context, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_setAgentParametersPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setAgentParameters(iceP_prs, context, del, cookie);
    }

    bool end_setAgentParameters(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int uptimeAgent(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_uptimeAgent(_iceI_begin_uptimeAgent(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_uptimeAgent(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_uptimeAgent(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_uptimeAgent(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_uptimeAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_uptimeAgent(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_uptimeAgent(const ::Ice::Context& context, const ::RoboCompAGMCommonBehavior::Callback_AGMCommonBehavior_uptimeAgentPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_uptimeAgent(context, del, cookie);
    }

    ::Ice::Int end_uptimeAgent(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_uptimeAgent(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompAGMCommonBehavior
{

class AGMCommonBehavior : public virtual ::Ice::Object
{
public:

    typedef AGMCommonBehaviorPrx ProxyType;
    typedef AGMCommonBehaviorPtr PointerType;

    virtual ~AGMCommonBehavior();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual bool activateAgent(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_activateAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool deactivateAgent(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_deactivateAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompAGMCommonBehavior::ParameterMap getAgentParameters(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getAgentParameters(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompAGMCommonBehavior::StateStruct getAgentState(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getAgentState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void killAgent(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_killAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool reloadConfigAgent(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_reloadConfigAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setAgentParameters(const ::RoboCompAGMCommonBehavior::ParameterMap&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setAgentParameters(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int uptimeAgent(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_uptimeAgent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const AGMCommonBehavior& lhs, const AGMCommonBehavior& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const AGMCommonBehavior& lhs, const AGMCommonBehavior& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompAGMCommonBehavior::StateEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompAGMCommonBehavior::StateStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompAGMCommonBehavior::StateStruct, S>
{
    static void write(S* ostr, const ::RoboCompAGMCommonBehavior::StateStruct& v)
    {
        ostr->write(v.state);
        ostr->write(v.info);
    }
};

template<typename S>
struct StreamReader< ::RoboCompAGMCommonBehavior::StateStruct, S>
{
    static void read(S* istr, ::RoboCompAGMCommonBehavior::StateStruct& v)
    {
        istr->read(v.state);
        istr->read(v.info);
    }
};

template<>
struct StreamableTraits< ::RoboCompAGMCommonBehavior::Parameter>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompAGMCommonBehavior::Parameter, S>
{
    static void write(S* ostr, const ::RoboCompAGMCommonBehavior::Parameter& v)
    {
        ostr->write(v.editable);
        ostr->write(v.value);
        ostr->write(v.type);
    }
};

template<typename S>
struct StreamReader< ::RoboCompAGMCommonBehavior::Parameter, S>
{
    static void read(S* istr, ::RoboCompAGMCommonBehavior::Parameter& v)
    {
        istr->read(v.editable);
        istr->read(v.value);
        istr->read(v.type);
    }
};

}

namespace RoboCompAGMCommonBehavior
{

template<class T>
class CallbackNC_AGMCommonBehavior_activateAgent : public Callback_AGMCommonBehavior_activateAgent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_AGMCommonBehavior_activateAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_activateAgent(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AGMCommonBehavior_activateAgentPtr
newCallback_AGMCommonBehavior_activateAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_activateAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_activateAgentPtr
newCallback_AGMCommonBehavior_activateAgent(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_activateAgent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_activateAgent : public Callback_AGMCommonBehavior_activateAgent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_AGMCommonBehavior_activateAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_activateAgent(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_activateAgentPtr
newCallback_AGMCommonBehavior_activateAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_activateAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_activateAgentPtr
newCallback_AGMCommonBehavior_activateAgent(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_activateAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_deactivateAgent : public Callback_AGMCommonBehavior_deactivateAgent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_AGMCommonBehavior_deactivateAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_deactivateAgent(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AGMCommonBehavior_deactivateAgentPtr
newCallback_AGMCommonBehavior_deactivateAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_deactivateAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_deactivateAgentPtr
newCallback_AGMCommonBehavior_deactivateAgent(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_deactivateAgent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_deactivateAgent : public Callback_AGMCommonBehavior_deactivateAgent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_AGMCommonBehavior_deactivateAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_deactivateAgent(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_deactivateAgentPtr
newCallback_AGMCommonBehavior_deactivateAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_deactivateAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_deactivateAgentPtr
newCallback_AGMCommonBehavior_deactivateAgent(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_deactivateAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_getAgentParameters : public Callback_AGMCommonBehavior_getAgentParameters_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMCommonBehavior::ParameterMap&);

    CallbackNC_AGMCommonBehavior_getAgentParameters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMCommonBehavior::ParameterMap ret;
        try
        {
            ret = proxy->end_getAgentParameters(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AGMCommonBehavior_getAgentParametersPtr
newCallback_AGMCommonBehavior_getAgentParameters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::ParameterMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_getAgentParameters<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_getAgentParametersPtr
newCallback_AGMCommonBehavior_getAgentParameters(T* instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::ParameterMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_getAgentParameters<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_getAgentParameters : public Callback_AGMCommonBehavior_getAgentParameters_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMCommonBehavior::ParameterMap&, const CT&);

    Callback_AGMCommonBehavior_getAgentParameters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMCommonBehavior::ParameterMap ret;
        try
        {
            ret = proxy->end_getAgentParameters(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_getAgentParametersPtr
newCallback_AGMCommonBehavior_getAgentParameters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::ParameterMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_getAgentParameters<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_getAgentParametersPtr
newCallback_AGMCommonBehavior_getAgentParameters(T* instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::ParameterMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_getAgentParameters<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_getAgentState : public Callback_AGMCommonBehavior_getAgentState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompAGMCommonBehavior::StateStruct&);

    CallbackNC_AGMCommonBehavior_getAgentState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMCommonBehavior::StateStruct ret;
        try
        {
            ret = proxy->end_getAgentState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AGMCommonBehavior_getAgentStatePtr
newCallback_AGMCommonBehavior_getAgentState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::StateStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_getAgentState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_getAgentStatePtr
newCallback_AGMCommonBehavior_getAgentState(T* instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::StateStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_getAgentState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_getAgentState : public Callback_AGMCommonBehavior_getAgentState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompAGMCommonBehavior::StateStruct&, const CT&);

    Callback_AGMCommonBehavior_getAgentState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::RoboCompAGMCommonBehavior::StateStruct ret;
        try
        {
            ret = proxy->end_getAgentState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_getAgentStatePtr
newCallback_AGMCommonBehavior_getAgentState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::StateStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_getAgentState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_getAgentStatePtr
newCallback_AGMCommonBehavior_getAgentState(T* instance, void (T::*cb)(const ::RoboCompAGMCommonBehavior::StateStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_getAgentState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_killAgent : public Callback_AGMCommonBehavior_killAgent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMCommonBehavior_killAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_killAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_killAgent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_killAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_killAgent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_killAgent : public Callback_AGMCommonBehavior_killAgent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMCommonBehavior_killAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_killAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_killAgent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_killAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_killAgentPtr
newCallback_AGMCommonBehavior_killAgent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_killAgent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_reloadConfigAgent : public Callback_AGMCommonBehavior_reloadConfigAgent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_AGMCommonBehavior_reloadConfigAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_reloadConfigAgent(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AGMCommonBehavior_reloadConfigAgentPtr
newCallback_AGMCommonBehavior_reloadConfigAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_reloadConfigAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_reloadConfigAgentPtr
newCallback_AGMCommonBehavior_reloadConfigAgent(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_reloadConfigAgent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_reloadConfigAgent : public Callback_AGMCommonBehavior_reloadConfigAgent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_AGMCommonBehavior_reloadConfigAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_reloadConfigAgent(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_reloadConfigAgentPtr
newCallback_AGMCommonBehavior_reloadConfigAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_reloadConfigAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_reloadConfigAgentPtr
newCallback_AGMCommonBehavior_reloadConfigAgent(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_reloadConfigAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_setAgentParameters : public Callback_AGMCommonBehavior_setAgentParameters_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_AGMCommonBehavior_setAgentParameters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_setAgentParameters(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AGMCommonBehavior_setAgentParametersPtr
newCallback_AGMCommonBehavior_setAgentParameters(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_setAgentParameters<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_setAgentParametersPtr
newCallback_AGMCommonBehavior_setAgentParameters(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_setAgentParameters<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_setAgentParameters : public Callback_AGMCommonBehavior_setAgentParameters_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_AGMCommonBehavior_setAgentParameters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_setAgentParameters(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_setAgentParametersPtr
newCallback_AGMCommonBehavior_setAgentParameters(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_setAgentParameters<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_setAgentParametersPtr
newCallback_AGMCommonBehavior_setAgentParameters(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_setAgentParameters<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AGMCommonBehavior_uptimeAgent : public Callback_AGMCommonBehavior_uptimeAgent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AGMCommonBehavior_uptimeAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_uptimeAgent(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AGMCommonBehavior_uptimeAgentPtr
newCallback_AGMCommonBehavior_uptimeAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_uptimeAgent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMCommonBehavior_uptimeAgentPtr
newCallback_AGMCommonBehavior_uptimeAgent(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMCommonBehavior_uptimeAgent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMCommonBehavior_uptimeAgent : public Callback_AGMCommonBehavior_uptimeAgent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AGMCommonBehavior_uptimeAgent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx proxy = ::RoboCompAGMCommonBehavior::AGMCommonBehaviorPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_uptimeAgent(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AGMCommonBehavior_uptimeAgentPtr
newCallback_AGMCommonBehavior_uptimeAgent(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_uptimeAgent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMCommonBehavior_uptimeAgentPtr
newCallback_AGMCommonBehavior_uptimeAgent(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMCommonBehavior_uptimeAgent<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
