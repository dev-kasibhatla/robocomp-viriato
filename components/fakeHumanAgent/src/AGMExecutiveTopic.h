// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `AGMExecutiveTopic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __AGMExecutiveTopic_h__
#define __AGMExecutiveTopic_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <AGMWorldModel.h>
#include <Planning.h>
#include <AGMExecutive.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompAGMExecutiveTopic
{

class AGMExecutiveTopic;
class AGMExecutiveTopicPrx;

}

namespace RoboCompAGMExecutiveTopic
{

class AGMExecutiveTopic : public virtual ::Ice::Object
{
public:

    using ProxyType = AGMExecutiveTopicPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void edgeUpdated(::RoboCompAGMWorldModel::Edge, const ::Ice::Current&) = 0;
    bool _iceD_edgeUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void edgesUpdated(::RoboCompAGMWorldModel::EdgeSequence, const ::Ice::Current&) = 0;
    bool _iceD_edgesUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void selfEdgeAdded(int, ::std::string, ::RoboCompAGMWorldModel::StringDictionary, const ::Ice::Current&) = 0;
    bool _iceD_selfEdgeAdded(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void selfEdgeDeleted(int, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_selfEdgeDeleted(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void structuralChange(::RoboCompAGMWorldModel::World, const ::Ice::Current&) = 0;
    bool _iceD_structuralChange(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void symbolUpdated(::RoboCompAGMWorldModel::Node, const ::Ice::Current&) = 0;
    bool _iceD_symbolUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void symbolsUpdated(::RoboCompAGMWorldModel::NodeSequence, const ::Ice::Current&) = 0;
    bool _iceD_symbolsUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompAGMExecutiveTopic
{

class AGMExecutiveTopicPrx : public virtual ::Ice::Proxy<AGMExecutiveTopicPrx, ::Ice::ObjectPrx>
{
public:

    void edgeUpdated(const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_edgeUpdated, iceP_modification, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto edgeUpdatedAsync(const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_edgeUpdated, iceP_modification, context);
    }

    ::std::function<void()>
    edgeUpdatedAsync(const ::RoboCompAGMWorldModel::Edge& iceP_modification,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_edgeUpdated, iceP_modification, context);
    }

    void _iceI_edgeUpdated(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context&);

    void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_edgesUpdated, iceP_modifications, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto edgesUpdatedAsync(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_edgesUpdated, iceP_modifications, context);
    }

    ::std::function<void()>
    edgesUpdatedAsync(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_edgesUpdated, iceP_modifications, context);
    }

    void _iceI_edgesUpdated(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context&);

    void selfEdgeAdded(int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_selfEdgeAdded, iceP_nodeid, iceP_edgeType, iceP_attributes, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto selfEdgeAddedAsync(int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_selfEdgeAdded, iceP_nodeid, iceP_edgeType, iceP_attributes, context);
    }

    ::std::function<void()>
    selfEdgeAddedAsync(int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes,
                       ::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_selfEdgeAdded, iceP_nodeid, iceP_edgeType, iceP_attributes, context);
    }

    void _iceI_selfEdgeAdded(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::std::string&, const ::RoboCompAGMWorldModel::StringDictionary&, const ::Ice::Context&);

    void selfEdgeDeleted(int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_selfEdgeDeleted, iceP_nodeid, iceP_edgeType, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto selfEdgeDeletedAsync(int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_selfEdgeDeleted, iceP_nodeid, iceP_edgeType, context);
    }

    ::std::function<void()>
    selfEdgeDeletedAsync(int iceP_nodeid, const ::std::string& iceP_edgeType,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_selfEdgeDeleted, iceP_nodeid, iceP_edgeType, context);
    }

    void _iceI_selfEdgeDeleted(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::std::string&, const ::Ice::Context&);

    void structuralChange(const ::RoboCompAGMWorldModel::World& iceP_w, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_structuralChange, iceP_w, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto structuralChangeAsync(const ::RoboCompAGMWorldModel::World& iceP_w, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_structuralChange, iceP_w, context);
    }

    ::std::function<void()>
    structuralChangeAsync(const ::RoboCompAGMWorldModel::World& iceP_w,
                          ::std::function<void()> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_structuralChange, iceP_w, context);
    }

    void _iceI_structuralChange(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::World&, const ::Ice::Context&);

    void symbolUpdated(const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_symbolUpdated, iceP_modification, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto symbolUpdatedAsync(const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_symbolUpdated, iceP_modification, context);
    }

    ::std::function<void()>
    symbolUpdatedAsync(const ::RoboCompAGMWorldModel::Node& iceP_modification,
                       ::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_symbolUpdated, iceP_modification, context);
    }

    void _iceI_symbolUpdated(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context&);

    void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_symbolsUpdated, iceP_modifications, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto symbolsUpdatedAsync(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_symbolsUpdated, iceP_modifications, context);
    }

    ::std::function<void()>
    symbolsUpdatedAsync(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompAGMExecutiveTopic::AGMExecutiveTopicPrx::_iceI_symbolsUpdated, iceP_modifications, context);
    }

    void _iceI_symbolsUpdated(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    AGMExecutiveTopicPrx() = default;
    friend ::std::shared_ptr<AGMExecutiveTopicPrx> IceInternal::createProxy<AGMExecutiveTopicPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

}

namespace RoboCompAGMExecutiveTopic
{

using AGMExecutiveTopicPtr = ::std::shared_ptr<AGMExecutiveTopic>;
using AGMExecutiveTopicPrxPtr = ::std::shared_ptr<AGMExecutiveTopicPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompAGMExecutiveTopic
{

class AGMExecutiveTopic;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic*);

}

}

namespace RoboCompAGMExecutiveTopic
{

class AGMExecutiveTopic;
::Ice::Object* upCast(::RoboCompAGMExecutiveTopic::AGMExecutiveTopic*);
typedef ::IceInternal::Handle< ::RoboCompAGMExecutiveTopic::AGMExecutiveTopic> AGMExecutiveTopicPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompAGMExecutiveTopic::AGMExecutiveTopic> AGMExecutiveTopicPrx;
typedef AGMExecutiveTopicPrx AGMExecutiveTopicPrxPtr;
void _icePatchObjectPtr(AGMExecutiveTopicPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompAGMExecutiveTopic
{

class Callback_AGMExecutiveTopic_edgeUpdated_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_edgeUpdated_Base> Callback_AGMExecutiveTopic_edgeUpdatedPtr;

class Callback_AGMExecutiveTopic_edgesUpdated_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_edgesUpdated_Base> Callback_AGMExecutiveTopic_edgesUpdatedPtr;

class Callback_AGMExecutiveTopic_selfEdgeAdded_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_selfEdgeAdded_Base> Callback_AGMExecutiveTopic_selfEdgeAddedPtr;

class Callback_AGMExecutiveTopic_selfEdgeDeleted_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_selfEdgeDeleted_Base> Callback_AGMExecutiveTopic_selfEdgeDeletedPtr;

class Callback_AGMExecutiveTopic_structuralChange_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_structuralChange_Base> Callback_AGMExecutiveTopic_structuralChangePtr;

class Callback_AGMExecutiveTopic_symbolUpdated_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_symbolUpdated_Base> Callback_AGMExecutiveTopic_symbolUpdatedPtr;

class Callback_AGMExecutiveTopic_symbolsUpdated_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AGMExecutiveTopic_symbolsUpdated_Base> Callback_AGMExecutiveTopic_symbolsUpdatedPtr;

}

namespace IceProxy
{

namespace RoboCompAGMExecutiveTopic
{

class AGMExecutiveTopic : public virtual ::Ice::Proxy<AGMExecutiveTopic, ::IceProxy::Ice::Object>
{
public:

    void edgeUpdated(const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_edgeUpdated(_iceI_begin_edgeUpdated(iceP_modification, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_edgeUpdated(iceP_modification, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgeUpdated(iceP_modification, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgeUpdated(iceP_modification, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_edgeUpdatedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgeUpdated(iceP_modification, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge& iceP_modification, const ::Ice::Context& context, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_edgeUpdatedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgeUpdated(iceP_modification, context, del, cookie);
    }

    void end_edgeUpdated(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_edgeUpdated(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_edgesUpdated(_iceI_begin_edgesUpdated(iceP_modifications, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_edgesUpdated(iceP_modifications, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgesUpdated(iceP_modifications, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgesUpdated(iceP_modifications, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_edgesUpdatedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgesUpdated(iceP_modifications, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence& iceP_modifications, const ::Ice::Context& context, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_edgesUpdatedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_edgesUpdated(iceP_modifications, context, del, cookie);
    }

    void end_edgesUpdated(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void selfEdgeAdded(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_selfEdgeAdded(_iceI_begin_selfEdgeAdded(iceP_nodeid, iceP_edgeType, iceP_attributes, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_selfEdgeAdded(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_selfEdgeAdded(iceP_nodeid, iceP_edgeType, iceP_attributes, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_selfEdgeAdded(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_selfEdgeAdded(iceP_nodeid, iceP_edgeType, iceP_attributes, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_selfEdgeAdded(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_selfEdgeAdded(iceP_nodeid, iceP_edgeType, iceP_attributes, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_selfEdgeAdded(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_selfEdgeAddedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_selfEdgeAdded(iceP_nodeid, iceP_edgeType, iceP_attributes, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_selfEdgeAdded(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMWorldModel::StringDictionary& iceP_attributes, const ::Ice::Context& context, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_selfEdgeAddedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_selfEdgeAdded(iceP_nodeid, iceP_edgeType, iceP_attributes, context, del, cookie);
    }

    void end_selfEdgeAdded(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_selfEdgeAdded(::Ice::Int, const ::std::string&, const ::RoboCompAGMWorldModel::StringDictionary&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void selfEdgeDeleted(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_selfEdgeDeleted(_iceI_begin_selfEdgeDeleted(iceP_nodeid, iceP_edgeType, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_selfEdgeDeleted(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_selfEdgeDeleted(iceP_nodeid, iceP_edgeType, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_selfEdgeDeleted(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_selfEdgeDeleted(iceP_nodeid, iceP_edgeType, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_selfEdgeDeleted(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_selfEdgeDeleted(iceP_nodeid, iceP_edgeType, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_selfEdgeDeleted(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_selfEdgeDeletedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_selfEdgeDeleted(iceP_nodeid, iceP_edgeType, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_selfEdgeDeleted(::Ice::Int iceP_nodeid, const ::std::string& iceP_edgeType, const ::Ice::Context& context, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_selfEdgeDeletedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_selfEdgeDeleted(iceP_nodeid, iceP_edgeType, context, del, cookie);
    }

    void end_selfEdgeDeleted(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_selfEdgeDeleted(::Ice::Int, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void structuralChange(const ::RoboCompAGMWorldModel::World& iceP_w, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_structuralChange(_iceI_begin_structuralChange(iceP_w, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& iceP_w, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_structuralChange(iceP_w, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& iceP_w, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_structuralChange(iceP_w, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& iceP_w, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_structuralChange(iceP_w, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& iceP_w, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_structuralChangePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_structuralChange(iceP_w, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_structuralChange(const ::RoboCompAGMWorldModel::World& iceP_w, const ::Ice::Context& context, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_structuralChangePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_structuralChange(iceP_w, context, del, cookie);
    }

    void end_structuralChange(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_structuralChange(const ::RoboCompAGMWorldModel::World&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void symbolUpdated(const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_symbolUpdated(_iceI_begin_symbolUpdated(iceP_modification, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_symbolUpdated(iceP_modification, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolUpdated(iceP_modification, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolUpdated(iceP_modification, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_symbolUpdatedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolUpdated(iceP_modification, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node& iceP_modification, const ::Ice::Context& context, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_symbolUpdatedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolUpdated(iceP_modification, context, del, cookie);
    }

    void end_symbolUpdated(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_symbolUpdated(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_symbolsUpdated(_iceI_begin_symbolsUpdated(iceP_modifications, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_symbolsUpdated(iceP_modifications, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolsUpdated(iceP_modifications, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolsUpdated(iceP_modifications, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_symbolsUpdatedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolsUpdated(iceP_modifications, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence& iceP_modifications, const ::Ice::Context& context, const ::RoboCompAGMExecutiveTopic::Callback_AGMExecutiveTopic_symbolsUpdatedPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_symbolsUpdated(iceP_modifications, context, del, cookie);
    }

    void end_symbolsUpdated(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompAGMExecutiveTopic
{

class AGMExecutiveTopic : public virtual ::Ice::Object
{
public:

    typedef AGMExecutiveTopicPrx ProxyType;
    typedef AGMExecutiveTopicPtr PointerType;

    virtual ~AGMExecutiveTopic();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void edgeUpdated(const ::RoboCompAGMWorldModel::Edge&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_edgeUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void edgesUpdated(const ::RoboCompAGMWorldModel::EdgeSequence&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_edgesUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void selfEdgeAdded(::Ice::Int, const ::std::string&, const ::RoboCompAGMWorldModel::StringDictionary&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_selfEdgeAdded(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void selfEdgeDeleted(::Ice::Int, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_selfEdgeDeleted(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void structuralChange(const ::RoboCompAGMWorldModel::World&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_structuralChange(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void symbolUpdated(const ::RoboCompAGMWorldModel::Node&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_symbolUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void symbolsUpdated(const ::RoboCompAGMWorldModel::NodeSequence&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_symbolsUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const AGMExecutiveTopic& lhs, const AGMExecutiveTopic& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const AGMExecutiveTopic& lhs, const AGMExecutiveTopic& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

}

namespace RoboCompAGMExecutiveTopic
{

template<class T>
class CallbackNC_AGMExecutiveTopic_edgeUpdated : public Callback_AGMExecutiveTopic_edgeUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_edgeUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgeUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgeUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgeUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgeUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_edgeUpdated : public Callback_AGMExecutiveTopic_edgeUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_edgeUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgeUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgeUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgeUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgeUpdatedPtr
newCallback_AGMExecutiveTopic_edgeUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgeUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_edgesUpdated : public Callback_AGMExecutiveTopic_edgesUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_edgesUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgesUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgesUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgesUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_edgesUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_edgesUpdated : public Callback_AGMExecutiveTopic_edgesUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_edgesUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgesUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgesUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgesUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_edgesUpdatedPtr
newCallback_AGMExecutiveTopic_edgesUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_edgesUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_selfEdgeAdded : public Callback_AGMExecutiveTopic_selfEdgeAdded_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_selfEdgeAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_selfEdgeAddedPtr
newCallback_AGMExecutiveTopic_selfEdgeAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_selfEdgeAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_selfEdgeAddedPtr
newCallback_AGMExecutiveTopic_selfEdgeAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_selfEdgeAdded<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_selfEdgeAddedPtr
newCallback_AGMExecutiveTopic_selfEdgeAdded(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_selfEdgeAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_selfEdgeAddedPtr
newCallback_AGMExecutiveTopic_selfEdgeAdded(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_selfEdgeAdded<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_selfEdgeAdded : public Callback_AGMExecutiveTopic_selfEdgeAdded_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_selfEdgeAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_selfEdgeAddedPtr
newCallback_AGMExecutiveTopic_selfEdgeAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_selfEdgeAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_selfEdgeAddedPtr
newCallback_AGMExecutiveTopic_selfEdgeAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_selfEdgeAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_selfEdgeAddedPtr
newCallback_AGMExecutiveTopic_selfEdgeAdded(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_selfEdgeAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_selfEdgeAddedPtr
newCallback_AGMExecutiveTopic_selfEdgeAdded(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_selfEdgeAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_selfEdgeDeleted : public Callback_AGMExecutiveTopic_selfEdgeDeleted_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_selfEdgeDeleted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_selfEdgeDeletedPtr
newCallback_AGMExecutiveTopic_selfEdgeDeleted(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_selfEdgeDeleted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_selfEdgeDeletedPtr
newCallback_AGMExecutiveTopic_selfEdgeDeleted(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_selfEdgeDeleted<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_selfEdgeDeletedPtr
newCallback_AGMExecutiveTopic_selfEdgeDeleted(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_selfEdgeDeleted<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_selfEdgeDeletedPtr
newCallback_AGMExecutiveTopic_selfEdgeDeleted(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_selfEdgeDeleted<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_selfEdgeDeleted : public Callback_AGMExecutiveTopic_selfEdgeDeleted_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_selfEdgeDeleted(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_selfEdgeDeletedPtr
newCallback_AGMExecutiveTopic_selfEdgeDeleted(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_selfEdgeDeleted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_selfEdgeDeletedPtr
newCallback_AGMExecutiveTopic_selfEdgeDeleted(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_selfEdgeDeleted<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_selfEdgeDeletedPtr
newCallback_AGMExecutiveTopic_selfEdgeDeleted(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_selfEdgeDeleted<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_selfEdgeDeletedPtr
newCallback_AGMExecutiveTopic_selfEdgeDeleted(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_selfEdgeDeleted<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_structuralChange : public Callback_AGMExecutiveTopic_structuralChange_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_structuralChange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_structuralChange<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_structuralChange<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_structuralChange<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_structuralChange<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_structuralChange : public Callback_AGMExecutiveTopic_structuralChange_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_structuralChange(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_structuralChange<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_structuralChange<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_structuralChange<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_structuralChangePtr
newCallback_AGMExecutiveTopic_structuralChange(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_structuralChange<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_symbolUpdated : public Callback_AGMExecutiveTopic_symbolUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_symbolUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_symbolUpdated : public Callback_AGMExecutiveTopic_symbolUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_symbolUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolUpdatedPtr
newCallback_AGMExecutiveTopic_symbolUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AGMExecutiveTopic_symbolsUpdated : public Callback_AGMExecutiveTopic_symbolsUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AGMExecutiveTopic_symbolsUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolsUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolsUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolsUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AGMExecutiveTopic_symbolsUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AGMExecutiveTopic_symbolsUpdated : public Callback_AGMExecutiveTopic_symbolsUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AGMExecutiveTopic_symbolsUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolsUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolsUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolsUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AGMExecutiveTopic_symbolsUpdatedPtr
newCallback_AGMExecutiveTopic_symbolsUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AGMExecutiveTopic_symbolsUpdated<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
